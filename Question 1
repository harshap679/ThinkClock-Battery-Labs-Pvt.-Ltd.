Q1 — Raspberry Pi Pico program (C) + wiring & how to run in Wokwi

Ans)  within minute 1 blink LED 10 times, minute 2 blink 20 times, minute 3 blink 30 timees.
A toggle button reverses the order (so when toggled the sequence becomes 30→20→10).
so we need to use Use the Pico onboard LED (GPIO 25).

// main.c
#include "pico/stdlib.h"
#include <stdio.h>

#define LED_PIN 25      
#define BUTTON_PIN 15   

volatile bool reverse = false;
volatile absolute_time_t last_button_time;

void gpio_callback(uint gpio, uint32_t events) {
    absolute_time_t now = get_absolute_time();
    if (absolute_time_diff_us(last_button_time, now) < 200000) return;
    last_button_time = now;
    reverse = !reverse;
}

void blink_n_times_in_minute(int n) {
    if (n <= 0) return;
    // period for one blink cycle (on+off) in ms
    double period_ms = (60000.0 / n);
    uint32_t half = (uint32_t)(period_ms / 2.0);
    for (int i = 0; i < n; ++i) {
        gpio_put(LED_PIN, 1);
        sleep_ms(half);
        gpio_put(LED_PIN, 0);
        sleep_ms(half);
        // allow button handling while sleeping is coarse, but ISR toggles flag anyway
    }
}

int main() {
    stdio_init_all();
    gpio_init(LED_PIN);
    gpio_set_dir(LED_PIN, GPIO_OUT);

    gpio_init(BUTTON_PIN);
    gpio_set_dir(BUTTON_PIN, GPIO_IN);
    gpio_pull_up(BUTTON_PIN); // button to ground

    // set up interrupt on falling edge (active-low button)
    gpio_set_irq_enabled_with_callback(BUTTON_PIN, GPIO_IRQ_EDGE_FALL, true, &gpio_callback);
    last_button_time = get_absolute_time();

    while (true) {
        if (!reverse) {
            // normal order: 10, 20, 30
            blink_n_times_in_minute(10);
            blink_n_times_in_minute(20);
            blink_n_times_in_minute(30);
        } else {
            // reversed: 30, 20, 10
            blink_n_times_in_minute(30);
            blink_n_times_in_minute(20);
            blink_n_times_in_minute(10);
        }
        // after three minutes we loop again (continues indefinitely)
    }

    return 0;
}

